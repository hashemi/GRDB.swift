import XCTest
#if GRDBCIPHER
    import GRDBCipher
#elseif GRDBCUSTOMSQLITE
    import GRDBCustomSQLite
#else
    import GRDB
#endif

class HasManyThroughAssociationTests: GRDBTestCase {
    
    // TODO: test requests generated by included()
    
    func testHasManyHasManyAssociation() throws {
        struct Right : TableMapping {
            static let databaseTableName = "right"
        }
        
        struct Middle : TableMapping {
            static let databaseTableName = "middle"
        }
        
        struct Left : TableMapping, MutablePersistable {
            static let databaseTableName = "left"
            func encode(to container: inout PersistenceContainer) {
                container["id"] = 1
            }
        }
        
        let dbQueue = try makeDatabaseQueue()
        try dbQueue.inDatabase { db in
            try db.create(table: "left") { t in
                t.column("id", .integer).primaryKey()
            }
            try db.create(table: "middle") { t in
                t.column("id", .integer).primaryKey()
                t.column("leftId", .integer).references("left")
            }
            try db.create(table: "right") { t in
                t.column("middleId", .integer).references("middle")
            }
        }
        
        try dbQueue.inDatabase { db in
            let association = Left.hasMany(Middle.hasMany(Right.self), through: Left.hasMany(Middle.self))
            try assertSQL(db, Left.all().joined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") JOIN \"right\" ON (\"right\".\"middleId\" = \"middle\".\"id\")")
            try assertSQL(db, Left.all().leftJoined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" LEFT JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") LEFT JOIN \"right\" ON (\"right\".\"middleId\" = \"middle\".\"id\")")
            try assertSQL(db, Left().makeRequest(association), "SELECT \"right\".* FROM \"right\" JOIN \"middle\" ON ((\"middle\".\"id\" = \"right\".\"middleId\") AND (\"middle\".\"leftId\" = 1))")
        }
    }
    
    func testHasManyHasOneAssociation() throws {
        struct Right : TableMapping {
            static let databaseTableName = "right"
        }
        
        struct Middle : TableMapping {
            static let databaseTableName = "middle"
        }
        
        struct Left : TableMapping, MutablePersistable {
            static let databaseTableName = "left"
            func encode(to container: inout PersistenceContainer) {
                container["id"] = 1
            }
        }
        
        let dbQueue = try makeDatabaseQueue()
        try dbQueue.inDatabase { db in
            try db.create(table: "left") { t in
                t.column("id", .integer).primaryKey()
            }
            try db.create(table: "middle") { t in
                t.column("id", .integer).primaryKey()
                t.column("leftId", .integer).references("left")
            }
            try db.create(table: "right") { t in
                t.column("middleId", .integer).references("middle")
            }
        }
        
        try dbQueue.inDatabase { db in
            let association = Left.hasMany(Middle.hasMany(Right.self), through: Left.hasOne(Middle.self))
            try assertSQL(db, Left.all().joined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") JOIN \"right\" ON (\"right\".\"middleId\" = \"middle\".\"id\")")
            try assertSQL(db, Left.all().leftJoined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" LEFT JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") LEFT JOIN \"right\" ON (\"right\".\"middleId\" = \"middle\".\"id\")")
            try assertSQL(db, Left().makeRequest(association), "SELECT \"right\".* FROM \"right\" JOIN \"middle\" ON ((\"middle\".\"id\" = \"right\".\"middleId\") AND (\"middle\".\"leftId\" = 1))")
        }
    }
    
    func testHasOneHasManyAssociation() throws {
        struct Right : TableMapping {
            static let databaseTableName = "right"
        }
        
        struct Middle : TableMapping {
            static let databaseTableName = "middle"
        }
        
        struct Left : TableMapping, MutablePersistable {
            static let databaseTableName = "left"
            func encode(to container: inout PersistenceContainer) {
                container["id"] = 1
            }
        }
        
        let dbQueue = try makeDatabaseQueue()
        try dbQueue.inDatabase { db in
            try db.create(table: "left") { t in
                t.column("id", .integer).primaryKey()
            }
            try db.create(table: "middle") { t in
                t.column("id", .integer).primaryKey()
                t.column("leftId", .integer).references("left")
            }
            try db.create(table: "right") { t in
                t.column("middleId", .integer).references("middle")
            }
        }
        
        try dbQueue.inDatabase { db in
            let association = Left.hasMany(Middle.hasOne(Right.self), through: Left.hasMany(Middle.self))
            try assertSQL(db, Left.all().joined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") JOIN \"right\" ON (\"right\".\"middleId\" = \"middle\".\"id\")")
            try assertSQL(db, Left.all().leftJoined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" LEFT JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") LEFT JOIN \"right\" ON (\"right\".\"middleId\" = \"middle\".\"id\")")
            try assertSQL(db, Left().makeRequest(association), "SELECT \"right\".* FROM \"right\" JOIN \"middle\" ON ((\"middle\".\"id\" = \"right\".\"middleId\") AND (\"middle\".\"leftId\" = 1))")
        }
    }
    
    func testHasManyBelongsToAssociation() throws {
        struct Right : TableMapping {
            static let databaseTableName = "right"
        }
        
        struct Middle : TableMapping {
            static let databaseTableName = "middle"
        }
        
        struct Left : TableMapping, MutablePersistable {
            static let databaseTableName = "left"
            func encode(to container: inout PersistenceContainer) {
                container["middleId"] = 1
            }
        }
        
        let dbQueue = try makeDatabaseQueue()
        try dbQueue.inDatabase { db in
            try db.create(table: "middle") { t in
                t.column("id", .integer).primaryKey()
            }
            try db.create(table: "left") { t in
                t.column("id", .integer).primaryKey()
                t.column("middleId", .integer).references("middle")
            }
            try db.create(table: "right") { t in
                t.column("middleId", .integer).references("middle")
            }
        }
        
        try dbQueue.inDatabase { db in
            let association = Left.hasMany(Middle.hasMany(Right.self), through: Left.belongsTo(Middle.self))
            try assertSQL(db, Left.all().joined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" JOIN \"middle\" ON (\"middle\".\"id\" = \"left\".\"middleId\") JOIN \"right\" ON (\"right\".\"middleId\" = \"middle\".\"id\")")
            try assertSQL(db, Left.all().leftJoined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" LEFT JOIN \"middle\" ON (\"middle\".\"id\" = \"left\".\"middleId\") LEFT JOIN \"right\" ON (\"right\".\"middleId\" = \"middle\".\"id\")")
            try assertSQL(db, Left().makeRequest(association), "SELECT \"right\".* FROM \"right\" JOIN \"middle\" ON ((\"middle\".\"id\" = \"right\".\"middleId\") AND (\"middle\".\"id\" = 1))")
        }
    }
    
    func testBelongsToHasManyAssociation() throws {
        struct Right : TableMapping {
            static let databaseTableName = "right"
        }
        
        struct Middle : TableMapping {
            static let databaseTableName = "middle"
        }
        
        struct Left : TableMapping, MutablePersistable {
            static let databaseTableName = "left"
            func encode(to container: inout PersistenceContainer) {
                container["id"] = 1
            }
        }
        
        let dbQueue = try makeDatabaseQueue()
        try dbQueue.inDatabase { db in
            try db.create(table: "left") { t in
                t.column("id", .integer).primaryKey()
            }
            try db.create(table: "right") { t in
                t.column("id", .integer).primaryKey()
            }
            try db.create(table: "middle") { t in
                t.column("leftId", .integer).references("left")
                t.column("rightId", .integer).references("right")
            }
        }
        
        try dbQueue.inDatabase { db in
            let association = Left.hasMany(Middle.belongsTo(Right.self), through: Left.hasMany(Middle.self))
            try assertSQL(db, Left.all().joined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") JOIN \"right\" ON (\"right\".\"id\" = \"middle\".\"rightId\")")
            try assertSQL(db, Left.all().leftJoined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" LEFT JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") LEFT JOIN \"right\" ON (\"right\".\"id\" = \"middle\".\"rightId\")")
            try assertSQL(db, Left().makeRequest(association), "SELECT \"right\".* FROM \"right\" JOIN \"middle\" ON ((\"middle\".\"rightId\" = \"right\".\"id\") AND (\"middle\".\"leftId\" = 1))")
        }
    }
}
