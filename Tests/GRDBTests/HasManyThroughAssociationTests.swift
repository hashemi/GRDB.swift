import XCTest
#if GRDBCIPHER
    import GRDBCipher
#elseif GRDBCUSTOMSQLITE
    import GRDBCustomSQLite
#else
    import GRDB
#endif

class HasManyThroughAssociationTests: GRDBTestCase {
    
    // TODO: test requests generated by included()
    
    func testHasManyThroughAssociation() throws {
        struct Right : TableMapping {
            static let databaseTableName = "right"
        }
        
        struct Middle : TableMapping {
            static let databaseTableName = "middle"
        }
        
        struct Left : TableMapping {
            static let databaseTableName = "left"
        }
        
        let dbQueue = try makeDatabaseQueue()
        try dbQueue.inDatabase { db in
            try db.create(table: "left") { t in
                t.column("id", .integer).primaryKey()
            }
            try db.create(table: "middle") { t in
                t.column("id", .integer).primaryKey()
                t.column("leftId", .integer).references("left")
            }
            try db.create(table: "right") { t in
                t.column("middleId", .integer).references("middle")
            }
        }
        
        try dbQueue.inDatabase { db in
            do {
                let association = Left.hasMany(Middle.hasMany(Right.self), through: Left.hasOne(Middle.self))
                try assertSQL(db, Left.all().joined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") JOIN \"right\" ON (\"right\".\"middleId\" = \"left\".\"id\")")
                try assertSQL(db, Left.all().leftJoined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" LEFT JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") LEFT JOIN \"right\" ON (\"right\".\"middleId\" = \"left\".\"id\")")
//                try assertSQL(db, Parent().makeRequest(association), "SELECT * FROM \"children\" WHERE (\"parentId\" = 2)")
            }
            do {
                let association = Left.hasMany(Middle.hasMany(Right.self), through: Left.hasMany(Middle.self))
                try assertSQL(db, Left.all().joined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") JOIN \"right\" ON (\"right\".\"middleId\" = \"left\".\"id\")")
                try assertSQL(db, Left.all().leftJoined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" LEFT JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") LEFT JOIN \"right\" ON (\"right\".\"middleId\" = \"left\".\"id\")")
                //                try assertSQL(db, Parent().makeRequest(association), "SELECT * FROM \"children\" WHERE (\"parentId\" = 2)")
            }
            do {
                let association = Left.hasMany(Middle.hasOne(Right.self), through: Left.hasMany(Middle.self))
                try assertSQL(db, Left.all().joined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") JOIN \"right\" ON (\"right\".\"middleId\" = \"left\".\"id\")")
                try assertSQL(db, Left.all().leftJoined(with: association), "SELECT \"left\".*, \"right\".* FROM \"left\" LEFT JOIN \"middle\" ON (\"middle\".\"leftId\" = \"left\".\"id\") LEFT JOIN \"right\" ON (\"right\".\"middleId\" = \"left\".\"id\")")
                //                try assertSQL(db, Parent().makeRequest(association), "SELECT * FROM \"children\" WHERE (\"parentId\" = 2)")
            }
        }
    }
}
